<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系 </p>
<p>National Formosa University  Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code"> <span>fqpabi8</span></span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-yoyo77651/">https://github.com/mdecp2024/hw-yoyo77651/</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-yoyo77651/">https://mdecp2024.github.io/hw-yoyo77651/</a></p>
<p></p>
<p></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<p>________________________________________________________________________________</p>
<p>使用 Codespaces 維護作業倉儲</p>
<p><strong>甚麼是 Codespaces:</strong></p>
<p>       Codespaces 是 GitHub 提供的一個雲端開發環境，允許開發者在瀏覽器中直接編寫、測試和除錯程式碼。它為用戶提供了一個即時的、可客製化的開發環境，具備以下幾個主要特點：</p>
<p> <strong>即時環境</strong>：用戶可以快速啟動一個新的開發環境，而無需在本地安裝軟體或配置環境。</p>
<p> <strong>雲端執行</strong>：所有的編輯和執行都是在雲端完成的，因此可以隨時隨地登入 Github 後使用，只需要一個瀏覽器。</p>
<p> <strong>預設配置</strong>：用戶可以使用預設的開發環境，也可以自定義配置，包括選擇語言、工具和框架 (計算機程式課程採用    Python 程式語言環境, 而且必須利用 pip 安裝執行網頁編輯環境所需模組:  <span data-teams="true"><span class="ui-provider mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj" dir="ltr"> pip install flask flask_cors bs4 lxml pelican markdown gevent)。</span></span></p>
<p><strong>與 GitHub 整合</strong>：由於是 GitHub 的一部分，用戶可以直接利用倉儲中 Code 下的 Codespaces 啟動或進入先前已經建立的環境，進行版本控制，無需設定提交帳號與電子郵件等資料或授權管理。</p>
<p>首次建立作業倉儲下的 Codespaces, 必需先在終端機安裝所需模組: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p>接著利用 python main.py 啟動編輯網頁, 以 admin 做為管理者密碼登入後, 可以修改動態網站內容.</p>
<p>動態網站編輯完成後, 必須利用 Convert 功能將動態網站轉為靜態網站內容 (其實就是將 config/config.htm 透過分頁後, 將靜態網頁檔案存入 content 目錄中.</p>
<p> </p>
<p>靜態網頁轉檔完成後, 就可以利用</p>
<p> </p>
<p>git add . </p>
<p> </p>
<p>git commit -m "提交訊息"</p>
<p> </p>
<p>git push</p>
<p> </p>
<p>將改版的作業倉儲內容, 從 Codespaces 環境推送到 Github 倉儲區, 接著 Github Pages 就會根據 Settings - Pages 中的設定, 將 main 分支的資料再經過轉檔, 部署到 Pages 的靜態網站中. 而靜態網站的網址將會是<span> </span><a href="https://mdecp2024.github.io/hw-" rel="noreferrer noopener" target="_blank" title="https://mdecp2024.github.io/hw-">https://mdecp2024.github.io/hw-</a><span> </span>後面接上個使用者的 Github 登入帳號.</p>
<p> </p>
<p>其實, 任何 Github 的倉儲若已經設定 Pages 要求用特定分支作為網頁根目錄, Github Pages 都會使用 https://github帳號.github.io/倉儲名稱 作為轉檔後的倉儲網頁網址</p>
<p><span data-teams="true"><span class="ui-provider mb mc md me mf mg mh mi mj mk ml mm mn mo mp mq mr ms mt mu mv mw mx my mz na nb nc nd ne nf ng nh ni nj" dir="ltr"><span> </span></span></span></p>
<p></p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>虛擬機建立</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jBLQ0giWMv0?si=Akcmc7pYZgrYN7hj" title="YouTube video player" width="560"></iframe></p>
<h3>Brython建立</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/SuI3wQ-Ron4?si=rzSeVCma_K-Wkhqp" title="YouTube video player" width="560"></iframe></p>
<h3>w10</h3>
<p><strong>題目一:</strong></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/gDVEfnzAPSY?si=eWIaZr-C9GVe59u4" title="YouTube video player" width="560"></iframe></p>
<p><span><strong>Brython頁面</strong>:建立好自己的Brython頁面後直接複製</span><span>貼上即可</span></p>
<p><span></span><span><strong>SciTE 編輯器</strong>:新增檔案檔名後一定要加上".py"再複製指令</span></p>
<p><span><strong>命令提示字元視窗</strong>:打開cmd視窗輸入</span></p>
<p><span>                                               cd y: </span></p>
<p><span>                                               cd tmp</span></p>
<p><span>                                               cd python_ex</span></p>
<p><span>                                               python "剛剛儲存的檔名".py</span></p>
<p><span><strong>Jupyter Lab</strong>:先在cmd視窗輸入cd Notebook，再輸入jupyter lab --collaborative</span></p>
<p><span>便可透過瀏覽器打開Jupyter Lab，新增note將指令貼上並按下執行</span></p>
<p><span><strong>Codespaces</strong>:打開Github執行雲端虛擬機Codespaces，安裝python模組</span></p>
<p><span>新增副檔名為.py的檔案並貼上程式碼</span>再輸入python "檔案名稱".py即可完成</p>
<p><strong>題目二:</strong></p>
<p>        <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/kp-YWjOMZ9E?si=QHolKv3hRPnzy5SP" title="YouTube video player" width="560"></iframe></p>
<div>
<div><code><span>name </span><span>=</span><span> </span><span>"41123242"</span></code></div>
<div><code><span>age </span><span>=</span><span> </span><span>20</span></code></div>
<div><code><span>_total </span><span>=</span><span> </span><span>8888</span></code></div>
<div><code><span>score1 </span><span>=</span><span> </span><span>1000000</span></code></div>
<br/>
<div><code><span>print</span><span>(</span><span>"正確的變數:"</span><span>)</span></code></div>
<div><code><span>print</span><span>(</span><span>"name:"</span><span>, name)</span></code></div>
<div><code><span>print</span><span>(</span><span>"age:"</span><span>, age)</span></code></div>
<div><code><span>print</span><span>(</span><span>"_total:"</span><span>, _total)</span></code></div>
<div><code><span>print</span><span>(</span><span>"score1:"</span><span>, score1)</span></code></div>
</div>
<p>執行結果說明：<br/>正確命名：name、age、_total 和 score1 都是有效的變數名稱。<br/>錯誤命名：1name：變數名稱不能以數字開頭。<br/>my-name：變數名稱不能包含 - 符號。<br/>if：不能使用 Python 關鍵字 if 作為變數名稱。</p>
<p><strong>題目三:</strong></p>
<p><br/><b><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Qkym6CRdips?si=t0EMfkoYLnnDWDs0" title="YouTube video player" width="560"></iframe></b></p>
<div>
<div><code><span></span></code></div>
<div><code><span># 已知條件</span></code></div>
<div><code><span>initial_velocity_kmh </span><span>=</span><span> </span><span>310</span><span>  </span><span># 初速度，公里/小時</span></code></div>
<div><code><span>distance </span><span>=</span><span> </span><span>1000</span><span>  </span><span># 跑道距離，公尺</span></code></div>
<br/>
<div><code><span># 將初速度轉換為公尺/秒</span></code></div>
<div><code><span>initial_velocity_ms </span><span>=</span><span> initial_velocity_kmh </span><span>*</span><span> (</span><span>1000</span><span> </span><span>/</span><span> </span><span>3600</span><span>)</span></code></div>
<br/>
<div><code><span># 計算加速度</span></code></div>
<div><code><span>acceleration </span><span>=</span><span> </span><span>-</span><span> (initial_velocity_ms </span><span>**</span><span> </span><span>2</span><span>) </span><span>/</span><span> (</span><span>2</span><span> </span><span>*</span><span> distance)</span></code></div>
<br/>
<div><code><span># 印出結果</span></code></div>
<div><code><span>print</span><span>(</span><span>"所需的加速度為:"</span><span>, acceleration, </span><span>"m/s²"</span><span>)</span></code></div>
</div>
<p><b>心得:</b></p>
<p><b> <em><span style="background-color: #ffffff;">  </span></em></b><em><span style="background-color: #ffffff;">  </span></em><span style="background-color: #ffffff;"> </span><span style="background-color: #ffffff;">透過這門課學習的Python程式讓我可以更了解如何運用Python去解微積分及物理,過程中還遇到一些小地方沒打好的錯誤但最後還是有利用Python解出第一題 A jet touches down at velocity 310 km/h. Find the constant acceleration required to stop the aircraft 1000 m down the runway.以前都不知道要怎麼運用現在終於學會了</span></p>
<h3>w11_hw</h3>
<p>以下影片說明如何利用近端可攜系統維護個人作業網站:</p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/8ff490f7e3e5e93db88e0290a69aad71/raw/c5f9e90d87752b92cec839e6c07ed8ded4a8e18f/hw11.py">第一題網站</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/XEvnizPIkjI?si=oCEZaAQ4vst2trxL" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/8ff490f7e3e5e93db88e0290a69aad71/raw/c5f9e90d87752b92cec839e6c07ed8ded4a8e18f/hw2">第二題網站</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/pYWKIrfSTRw?si=QVmc12jY5BIv2xlo" title="YouTube video player" width="560"></iframe></p>
<h3>w12_hw</h3>
<p>第一題:</p>
<p><span>說明:Strings, input(), and print() (字串、input()和print())</span></p>
<p>"<a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/224ab1f367300d5256a09a7ae36d16f419667a3b/w12hw1.py">你叫什麼</a>名字"</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">input("What's your name?")</pre>
<p>"<a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/498a3c67004b9bcf985b32ff4022dd33be646aea/w12hw2.py">cat</a>"</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")</pre>
<p><br/><br/></p>
<p>第二題:</p>
<p><span>說明: 變數和字串連接</span></p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/feb41cbdfca94d95043b6f880dac1bd6c066375c/w12%2520hw3.py"> "name"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "Liao" #變數first_name為"自己的姓"
last_name  = "Tzu YU" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/8dcfcdf6b27be95613468db77bfd592d492bb4ff/w12hw4.py"> "名字和喜歡的食物"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?") #變數name為input所輸入之文字
favorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字
print ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)
print ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)
print (name + "'s favorite food is " + favorite_food) #列印name (數值)+ 's favorite food is (此段為文字)+favorite_food(數值)
</pre>
<p></p>
<p>第三題:</p>
<p><span>說明:Lists and if... in... / else... </span></p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/ea1f4943fab0324dad4c1eec64861aa1d7722f78/w12%2520hw5.py"> "買書"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">programming_books = ["Learn python", "Python for all",  "Intro to python"] #在programming_books變數裡面有3個字串
print (programming_books) #列印programming_books變數(會出現三個字串)
wanted_book = input("Hi! What book would you like to buy?") #設定一個變數為wanted_book其等於input指令回傳之數值
print (wanted_book) #列印wanted_book變數
if wanted_book in programming_books: #如果 "變數wanted_book"回傳之值 在"programming_books"字串當中
    print ("Yes, we sell it!")       #列印 是的我們有販賣
else:                            #反之    
    print ("Sorry, we don't sell that book") #列印 抱歉我們沒有販賣</pre>
<p>第四題:</p>
<p><span>說明:List methods: .append() and .remove() (列表方法:</span><span>.append() and .remove()</span></p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/4cc5801d02cffb9b3b8d504804636e8889f54521/w12%2520hw6.py"> "購物清單"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串
print (shopping_list) #列印shopping_list變數
new_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值
 
if new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式
    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list
    print (shopping_list) #列印shopping_list字串
else:                    #反之
    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單
    print (shopping_list) #列印購物清單
#以下是移除物品的程式
item_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)
 
if item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行
    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)
    print (shopping_list) #列印購物清單
else:                     #反之
    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)
    print (shopping_list) #列印購物清單</pre>
<p>第五題:</p>
<p><span>說明:List methods: .index(), .pop(), and .insert() (列表方法:</span><span>.index(), .pop(), and .insert())</span></p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/6687e758a5470e647fa4d7467fdc5554bf803977/w12hw8.py">"menu"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"
side_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個
print (side_dish_index) #列印side_dish_index  列印他在第幾位
todays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉
print (todays_menu) #列印今日菜單
todays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條
print (todays_menu) #列印今日菜單</pre>
<p>第六題:</p>
<p><span>說明:</span>List 串列切片</p>
<p>:<a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/f23f42e8d7b6373c66d2758262edbfa0b8cd1a60/w12hw7.py">"city"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"] #變數城市=以下字串
print (cities) #列印 (城市)
print (cities[1]) #列印 (城市 [1])    由於程式是由0開始計算 所以第一個會是Prague
print (cities[1:4]) #列印 (城市 [1:4]) 列印出來會是['Prague', 'Cape Town', 'Tokyo'] 由於執行到4就停止了所以只有三個
print (cities[1:4:2]) #列印 城市 [1:4:2]) 列印出來會是['Prague', 'Tokyo'] 因為步數設定為2 程式執行會把1~4由左至右一次跳過兩個進行輸出
print (cities[0:3]) #列印 城市 [0:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 這次是從0開始計算
print (cities[:3]) #列印 城市 [:3]) 列印出來會是['San Diego', 'Prague', 'Cape Town'] 由於未輸入數值,默認為0
print (cities[2:5]) #列印 城市 [2:5]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 從2~5
print (cities[2:]) #列印 城市 [2:]) 列印出來會是 ['Cape Town', 'Tokyo', 'Melbourne'] 如果結束未輸入默認為列表的長度之值
print (cities[0:5:2]) #列印 城市 [0:5:2]) 列印出來會是['San Diego', 'Cape Town', 'Melbourne'] 程式執行會把0~5由左至右一次跳過兩個進行輸出
print (cities[::2]) #列印 城市 [::2]) 列印出來會是 ['San Diego', 'Cape Town', 'Melbourne'] 未輸入開始會默認0終點會默認列表的長度
print (cities[4]) #列印 城市 [4]) 列印出來會是 Melbourne 
print (cities[-1]) #列印 城市 [-1]) 列印出來會是 Melbourne -值會倒退計算 "含前不含後"
print (cities[-4:-1]) #列印 城市 [-4:-1]) 列印出來會是 ['Prague', 'Cape Town', 'Tokyo']
cities[3:0:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
cities[-2:-5:-1] #這個是切片操作 如果列印出來會是 ['Tokyo', 'Cape Town', 'Prague']
print (cities[::-1]) #列印 城市 [::-1]) ['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Diego']</pre>
<p><span>第七題: </span></p>
<p><span> <a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/79026a010ed4190ba729d3e311edd94a10f68b1a/w12hw9.py">感官</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個包含五種感官的清單
senses = ["eyes", "nose", "ears", "tongue", "skin"]
print(senses)  # 輸出原始的感官清單
 
# 將清單中索引為1的元素從 "nose" 改為 "smell"
senses[1] = "smell"
print(senses)  # 輸出更新後的感官清單
 
# 將索引範圍為3到5的元素（"tongue", "skin"）改為 ["taste", "touch"]
senses[3:5] = ["taste", "touch"]
print(senses)  # 輸出更新後的感官清單
 
# 將索引範圍從0到3，步長為2的元素（"eyes", "ears"）改為 ["sight", "hearing"]
senses[0:3:2] = ["sight", "hearing"]
print(senses)  # 輸出最終更新後的感官清單
</pre>
<p><span><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/5a2a2df950ef414e6f3377030d3f27445fd11dce/w12hw10.py">行星</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個行星列表
planets = ["Mercury", "Mars", "Earth", "Neptune"]
# 輸出原始行星列表
print(planets)
 
# 將 "Jupiter" 加入列表的末尾
planets = planets + ["Jupiter"]
# 輸出更新後的行星列表
print(planets)
 
# 在索引 2 前插入 "Venus"
# 先取出索引 0 到 1 的元素，然後加上 "Venus" 和索引 2 到 4 的元素
planets = planets[0:2] + ["Venus"] + planets[2:5]
# 輸出再次更新的行星列表
print(planets)
 
# 在索引 5 位置後插入 "Uranus" 和 "Saturn"
# 取出索引 0 到 4 的元素，加上新元素，然後加上索引 5 之後的元素
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]
# 輸出最終的行星列表
print(planets)
</pre>
<p><span><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/d17027c7472e8b4594e04a21ab4ceeeea461d3ab/w12%2520hw11.py">房子</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
print(house)  # 原始列表
 
# 刪除 "dining room"
del house[1]
print(house)  # ["kitchen", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
 
# 刪除 "garden" 和 "balcony"
del house[4:6]
print(house)  # ["kitchen", "living room", "bedroom", "bathoom", "terrace"]
 
# 刪除 "kitchen", "bedroom", 和 "terrace"
del house[::2]
print(house)  # ["living room", "bathoom"]
 
# 刪除整個清單
del house
try:
    print(house)  # 此處會觸發 NameError
except NameError:
    print("The variable 'house' no longer exists.")</pre>
<p><span>第八題:</span></p>
<p><span> <a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/0ae7d2394fdff6d0319391fada99c933a631cbff/w12hw12.py">我朋友最喜歡的菜</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義朋友的名字列表
friends = ["Geetha", "Luca", "Daisy", "Juhan"]  
 
# 定義喜愛的食物列表
dishes  = ["sushi", "burgers", "tacos", "pizza"]  
 
# 打印朋友的名字
print("My friends' names are:")  
print(friends)  
 
# 使用 for 迴圈遍歷朋友列表，打印索引和對應的朋友名字
for index in range(0, 4):  
    print("index:  " + str(index))  # 打印當前索引
    print("friend: " + friends[index])  # 打印對應的朋友名字
 
# 打印喜愛的食物
print("Their favorite dishes are:")  
print(dishes)  
 
# 使用 for 迴圈遍歷食物列表，打印索引和對應的食物
for index in range(0, 4):  
    print("index:  " + str(index))  # 打印當前索引
    print("dish: " + dishes[index])  # 打印對應的食物
 
# 使用 for 迴圈，同時列出朋友和他們喜愛的食物
for index in range(0, 4):  
    print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])
</pre>
<p><span>第九題:</span></p>
<p><span> <a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/7429e7f96a03438b8f01992856375478cb90d1de/w12hw13.py">在動物園</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 動物清單
animals = ["giraffe", "penguin", "dolphin"]
print(animals)  # 輸出清單
 
# 針對清單中的每個位置進行操作
for i in range(0, len(animals)):  # 使用 len() 動態取得清單長度
    print("-- Beginning of loop --")
    # 輸出每個元素及其位置
    print("The element in position " + str(i) + " is " + animals[i])
 
# 想要看到的動物
wanted_to_see = "penguin"
 
# 針對清單中的每個位置進行操作
for i in range(0, len(animals)):
    # 如果當前的動物是想看的那個
    if animals[i] == wanted_to_see:
        # 輸出特別訊息
        print("I saw a " + animals[i] + " and I really wanted to see it!")
    # 如果當前的動物不是特別想看的那個
    else:
        # 輸出一般訊息
        print("I saw a " + animals[i])</pre>
<p><span>第十題:</span></p>
<p><span>說明:for迴圈</span></p>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/d2b899f978b6c94dac527ee900e31fe6/raw/3de0e3c16200df296e9af2c993d555f383aa1ce6/w12hw14.py">我的手套在哪裡</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print(accessories)
 
# 逐一列出元素及其位置
for i in range(len(accessories)):
    print(f"The element {accessories[i]} is in position {i}")
 
# 列出長度等於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) == 6:
        print(f"The element {accessories[i]} is in position {i} and it has 6 characters")
 
# 列出長度小於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) &lt; 6:
        print(f"The element {accessories[i]} is in position {i} and it has less than 6 characters")
 
# 定義閾值：6，列出長度大於 6 的元素
n_of_characters = 6
for i in range(len(accessories)):
    if len(accessories[i]) &gt; n_of_characters:
        print(f"The element {accessories[i]} is in position {i} and it has more than {n_of_characters} characters")
 
# 定義閾值：6，列出長度不等於 6 的元素
for i in range(len(accessories)):
    if len(accessories[i]) != n_of_characters:
        print(f"The element {accessories[i]} is in position {i} and it has a number of characters different from {n_of_characters}")
 
# 定義閾值：2，列出位置小於或等於 2 的元素
position = 2
for i in range(len(accessories)):
    if i &lt;= position:
        print(f"The element {accessories[i]} is in position {i}, which is less than or equal to {position}")
 
# 定義閾值：2，列出位置大於或等於 2 的元素
for i in range(len(accessories)):
    if i &gt;= position:
        print(f"The element {accessories[i]} is in position {i}, which is at least {position}")</pre>
<p></p><h3>w13_hw</h3>
<p>程式連結:</p>
<p>        <a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/cb648cb8e21cd001b87c03e68b617a2f/raw/784357e7821641076fe0b75703fb8d61e4304dbc/1">  紅色正方形</a></p>
<p></p>
<p></p>
<p><img alt="" height="200" src="/images/下載.png" width="200"/></p>
<p>       <a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/cb648cb8e21cd001b87c03e68b617a2f/raw/6c48f63b9994fa819fe9a93521a3fd44f3e04be1/2">方形重疊</a></p>
<p><img alt="" height="200" src="/images/下載 (1).png" width="200"/></p>
<h3>w13_ai</h3>
<h3>w14_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/afc591b32a7979edaa3d573ac4fa68bc/raw/f3369af1e4c6b375e5b70a634274a615f687d173/hw1.py">三個圓</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 隨機顏色生成器
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓形，並填充交集區域
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布，創建並取得畫布和其 2D 上下文
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清空畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲字典
    color_dict = {}
    
    # 使用掃描線方法填充區域，逐行掃描畫布上的每個像素
    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)  # 判斷點是否在圓1內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)  # 判斷點是否在圓2內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)  # 判斷點是否在圓3內
            
            # 判斷當前點屬於哪個區域，並選擇相應顏色
            if in_circle1 and in_circle2 and in_circle3:
                if "all_three" not in color_dict:
                    color_dict["all_three"] = random_color_generator()
                current_color = color_dict["all_three"]
            elif in_circle1 and in_circle2:
                if "circle1_and_2" not in color_dict:
                    color_dict["circle1_and_2"] = random_color_generator()
                current_color = color_dict["circle1_and_2"]
            elif in_circle2 and in_circle3:
                if "circle2_and_3" not in color_dict:
                    color_dict["circle2_and_3"] = random_color_generator()
                current_color = color_dict["circle2_and_3"]
            elif in_circle1 and in_circle3:
                if "circle1_and_3" not in color_dict:
                    color_dict["circle1_and_3"] = random_color_generator()
                current_color = color_dict["circle1_and_3"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"  # 背景顏色設為白色
            
            # 填充當前像素
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

# 設定三個圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</pre>
<p></p><h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/a53f2af22adf3dabcad01a2fc83350ac/raw/9ca4edf363158797f8024e1a655c9c3a4a8fa6db/hw1.py">"從1累加到100"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">sum = 0
for i in range(1, 101):
    sum += i

# 顯示題目
print(f"從 1 累加到 100 的總和是：{sum}")</pre>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/a53f2af22adf3dabcad01a2fc83350ac/raw/cdfda9c5ee55ff363cc3404abb31a4e5c60cce3f/hw2.py">"addto"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    sum = 0
    for i in range(start, end + 1):  # 計算從 start 到 end 的總和
        sum += i
    return sum

# 呼叫函式並顯示結果
result = addto(1, 100)
print(f"從 1 累加到 100 的總和是：{result}")
</pre>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/a53f2af22adf3dabcad01a2fc83350ac/raw/a122ac9fd5d2c84365b9e85aac62433821eca5dc/hw3.py">"add_only_even(1, 100)"</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(init, upto):
    """
    累加從 init 到 upto 範圍內的所有偶數，並輸出題目和結果。
    
    :init: 起始整數
    :upto: 結束整數
    :return: 範圍內偶數的累加結果
    """
    result = sum(i for i in range(init, upto + 1) if i % 2 == 0)
    print(f"從 {init} 到 {upto} 的偶數累加結果為 {result}")
    return result

# 測試函式
add_only_even(1, 100)
</pre>
<p><a href="https://mdecp2024.github.io/hw-41323201/content/Brython.html?src=https://gist.githubusercontent.com/41323201/1499e5af01612bb04ea3becd27e95dc2/raw/19cc81c31058cc134ffa1ce2bce96702bcdef0da/add_avold_8.py">add_avoid_8(1, 100)</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義 addto 函式
def addto(init, upto):
    # 初始值 sum 為 0
    sum = 0
    # 利用 for 迴圈進行累加
    for i in range(init, upto + 1):
        if i % 10 == 8:  # 檢查數字尾數是否為 8
            sum = sum + i
    return sum

# 主程式
init = 1
upto = 100
# 呼叫 addto 函式
result = addto(init, upto)
print("從" + str(init) + "累加到" + str(upto) + "，只加尾數為8的數=" + str(result))
</pre>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/f13d85c240347529ede706dd80e0e5a6/raw/81cd06e8a9204678476dadd735968baef7805380/w16exam1.py">exam1</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
 
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
 
setup_canvas()

# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")

# Set origin (32, 42)
origin_x, origin_y = 32, 42   

# Draw X
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()

# Draw Y
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()

# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 42)", origin_x + 5, origin_y - 5)

# Draw shapes
# Adjusted placement to fix alignment issue

# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()

# 鑽石(Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()

# 三角形 (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()

# 圓形 (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()

# 正方形 (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()

# 長方形(Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "black"
ctx.fill()</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/J6hPze5TnLI?si=f_3ZXweaabgAV9rj" title="YouTube video player" width="560"></iframe></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/f13d85c240347529ede706dd80e0e5a6/raw/1a7b1a9d27e10a698d07fdde546dc8b5ec6c4b9f/w16exam2.py">exam2</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 創建添加畫布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 獲取繪圖上下文
    ctx = canvas.getContext("2d")

    # 設置繪圖參數
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 17 * 2
    # 整體向右偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定義迷宮線條
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]

    # 旋轉繪製迷宮線條
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋轉后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 42)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    # 调整迷宫角度 
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)
</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/iL_UhY9vbvg?si=re3K5INuwoztrS0A" title="YouTube video player" width="560"></iframe></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-yoyo77651/content/Brython.html?src=https://gist.githubusercontent.com/yoyo77651/f13d85c240347529ede706dd80e0e5a6/raw/de4eb9e916256700650cafca6a9477fb09943b28/w16exam3.py">exam3</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

def draw_maze(angle_degrees):
    # 創建畫布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 獲取繪圖上下文
    ctx = canvas.getContext("2d")

    # 設置繪圖參數
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 17 * 2
    # 整體向右的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定義迷宮線條
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]

    # 繪製迷宮線條
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y, pixel_scale


def find_path():
     
    path = [
        ((1.5, 0), (1.5, 0.5)),
        ((1.5, 0.5), (4.5, 0.5)),
        ((4.5, 0.5), (4.5, 2.5)),
        ((4.5, 2.5), (3.5, 2.5)),
        ((3.5, 2.5), (3.5, 1.5)),
        ((3.5, 1.5), (2.5, 1.5)),
        ((2.5, 1.5), (2.5, 2.5)),
        ((2.5, 2.5), (1.5, 2.5)),
        ((1.5, 2.5), (1.5, 3.5)),
        ((1.5, 3.5), (3.5, 3.5)),
        ((3.5, 3.5), (3.5, 4.5)),
        ((3.5, 4.5), (2.5, 4.5)),
        ((2.5, 4.5), (2.5, 5))
    ]
    return path


def draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):
    angle_radians = math.radians(angle_degrees)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    for line in path:
        start = line[0]
        end = line[1]

        # 旋轉起點座標
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋轉終點座標
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋轉後文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 42)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    maze_angle = 0
    text_angle = 0
    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)
    path = find_path()
    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/M4-0-lpGoiU?si=-Wiubj8xSp4hQLWC" title="YouTube video player" width="560"></iframe></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input control-id="ControlID-1" id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input control-id="ControlID-2" onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button control-id="ControlID-5" id="kw_run1">Run</button> <button control-id="ControlID-6" id="kw_show_console1">Output</button> <button control-id="ControlID-7" id="kw_clear_console1">清除輸出區</button><button control-id="ControlID-8" id="clear_bd1">清除繪圖區</button><button control-id="ControlID-9" onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" control-id="ControlID-10" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button control-id="ControlID-11" id="add1to100part2">1 add to 100</button><button control-id="ControlID-12" id="cango_three_gears">cango_three_gears</button><button control-id="ControlID-13" id="bsnake">BSnake</button><button control-id="ControlID-14" id="aitetris">AI Tetris</button><button control-id="ControlID-15" id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input control-id="ControlID-3" id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input control-id="ControlID-4" onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button control-id="ControlID-16" id="kw_run2">Run</button> <button control-id="ControlID-17" id="kw_show_console2">Output</button> <button control-id="ControlID-18" id="kw_clear_console2">清除輸出區</button><button control-id="ControlID-19" id="clear_bd2">清除繪圖區</button><button control-id="ControlID-20" onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" control-id="ControlID-21" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>